@startuml

left to right direction




node "sml_cb" as sml_cbStack #88cc88 {
    portin "parent" as sml_cbStackPortIn #blue
}
node "sml_em" as sml_emStack #88cc88 {
    portin "parent" as sml_emStackPortIn #blue
}
node "sml_pe" as sml_peStack #88cc88 {
    portin "parent" as sml_peStackPortIn #blue
}
node "sml_sc" as sml_scStack #88cc88 {
    portin "parent" as sml_scStackPortIn #blue
}
node "sml_so" as sml_soStack #88cc88 {
    portin "parent" as sml_soStackPortIn #blue
}
node "sml_sr" as sml_srStack #88cc88 {
    portin "parent" as sml_srStackPortIn #blue
}



node "sml" #88cc88 {


    hexagon parentnet #black [
            <b><color:white>parent</color></b>
    ]
    
    portin " " as parentnetPortIn #black
    parentnetPortIn -[#black]- parentnet
    
    hexagon childrennet #blue [
            <b><color:white>children</color></b>
    ]
    
    portout " " as childrennetPortOut #blue
    childrennet -[#blue]- childrennetPortOut
    
    hexagon siblingsnet #red [
            <b><color:white>siblings</color></b>
    ]
    

node "broker" as brokerService #white {
    portOut " " as brokerServicechildrennet #blue
   brokerServicechildrennet -[#blue]- childrennet
   
    collections "sml_cb" as sml_cbimage
    
}
node "envmangaer" as envmangaerService #white {
    portOut " " as envmangaerServicechildrennet #blue
   envmangaerServicechildrennet -[#blue]- childrennet
   
    collections "sml_em" as sml_emimage
    
}
node "provision" as provisionService #white {
    portOut " " as provisionServicechildrennet #blue
   provisionServicechildrennet -[#blue]- childrennet
   
    collections "sml_pe" as sml_peimage
    
}
node "controller" as controllerService #white {
    portOut " " as controllerServicechildrennet #blue
   controllerServicechildrennet -[#blue]- childrennet
   
    collections "sml_sc" as sml_scimage
    
}
node "orchestrator" as orchestratorService #white {
    portOut " " as orchestratorServicechildrennet #blue
   orchestratorServicechildrennet -[#blue]- childrennet
   
    collections "sml_so" as sml_soimage
    
}
node "repo" as repoService #white {
    portOut " " as repoServicechildrennet #blue
   repoServicechildrennet -[#blue]- childrennet
   
    collections "sml_sr" as sml_srimage
    
}
node "web" as webService #white {
    portOut " " as webServicechildrennet #blue
   webServicechildrennet -[#blue]- childrennet
       portOut " " as webServicesiblingsnet #red
   webServicesiblingsnet -[#red]- siblingsnet
   

    artifact "sml_web" as sml_webimage
    
}

}

sml_cbimage --> sml_cbStack
    
    childrennetPortOut -[#blue]- sml_cbStackPortIn
    
sml_emimage --> sml_emStack
    
        sml_emStacksnet --[#black]-- parent
    
    childrennetPortOut -[#blue]- sml_emStackPortIn
    
sml_peimage --> sml_peStack
    
    childrennetPortOut -[#blue]- sml_peStackPortIn
    
sml_scimage --> sml_scStack
    
    childrennetPortOut -[#blue]- sml_scStackPortIn
    
sml_soimage --> sml_soStack
    
    childrennetPortOut -[#blue]- sml_soStackPortIn
    
sml_srimage --> sml_srStack
    
    childrennetPortOut -[#blue]- sml_srStackPortIn
    

@enduml
