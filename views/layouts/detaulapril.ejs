<!DOCTYPE html>
<html>

<%
let hostURL = global.ailtire.config.host;
if(global.ailtire.config.listenPort) {
hostURL += ':' + global.ailtire.config.listenPort;
}
%>
<head>
    <title>Edgemere</title>
    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js"></script> -->
    <link rel="stylesheet/less" type="text/css" href="styles/importer.less"/>
    <script type="module" src="js/ckeditor.js"></script>

    <base href="http://<%= hostURL %><%= global.ailtire.config.urlPrefix %>/">
    <script src="js/jquery.js"></script>
    <script src="js/w2ui.js"></script>
    <link rel="stylesheet" href="styles/w2ui.css"/>
   <!--  <script src="https://aframe.io/releases/1.1.0/aframe.min.js"></script> -->
    <script src="js/aframe.js"></script>
    <script src="js/three.js"></script>
    <script src="js/3d-force-graph.js"></script>
    <script src="js/d3-octree.js"></script>
    <script src="js/d3-force-3d.js"></script>
    <script src="js/Graph3D.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <!-- <script src="//unpkg.com/three-spritetext"></script> -->

</head>
<body style="overflow: hidden;">

<!--This is a garden of 3DObjects for the graphing-->
<div style="display:none;">
    <div id="scratchspace" style="display:none;">
        <a-scene embedded height="0px" width="0px">
            <a-entity id="ObjectGarden" position="-10 20 -100">
                <a-sphere id="default3D" position="0 0 0" radius="10" color="#cccccc"></a-sphere>
                <a-sphere id="default3DSelected" position="0 0 0" radius="10" color="#ffff00"></a-sphere>
                <a-sphere id="default3DTargeted" position="0 0 0" radius="10" color="#ff0000"></a-sphere>
                <a-sphere id="default3DSourced" position="0 0 0" radius="10" color="#00ff00"></a-sphere>
<% for(let cname in global.classes) {
let cls = global.classes[cname];
if(cls.definition.view) {
%>
                <%- cls.definition.view.object3d() %>
<% } } %>
            </a-entity>
        </a-scene>
    </div>
</div>

<div id="main" style="position: absolute; width: 100%; height: 100%; overflow: hidden;"></div>
<script type="module">
    import {APackage, AScenario, AUsecase, AActor, AModel, AStack, AEnvironment} from './js/ailtire/index.js';
    let selectedObject ={};
    let pkgview = new APackage({});
    let scenarioview = new AScenario({});
    let usecaseview = new AUsecase({});
    let actorview = new AActor({});
    let modelview = new AModel({});
    let stackview = new AStack({});
    let envview = new AEnvironment({});

// common colors to use based on status
    const scolor = {
        started: "#aaffff",
        create: "#aaffff",
        completed: "#aaffaa",
        failed: "#ffaaaa",
        enabled: "#aaffaa",
        disable: "#aaaaaa",
        rejected: "#ffaaaa",
        accepted: "#aaffff",
        update: "#aaffff",
        needed: "#ffbb44",
        selected: "#aaffaa",
        evaluated: "#ffffaa",
    };

    const handlers = {
        scenario: scenarioview.handle,
        package: pkgview.handle,
        usecase: usecaseview.handle,
        actor: actorview.handle,
        model: modelview.handle,
        stack: stackview.handle,
        environment: envview.handle,
    }
    // currentView is set to null first.
    let currentView = null;

    function processPackage(result) {
        console.log(result);
    }

    function showModelList(panel, parent) {
        $.ajax({
            url: 'model/list',
            success: function (results) {
                let modelList = [];
                let mnames = Object.keys(results).sort();
                for (let i in mnames) {
                    let mname = mnames[i];
                    let model = results[mname];
                    let mItem = {
                        id: mname.toLowerCase(),
                        text: model.name,
                        img: 'icon-page',
                        link: `${mname}/list`,
                        count: model.count,
                        view: 'model'
                    };
                    modelList.push(mItem);
                }
                w2ui[panel].add(parent, modelList);
            }
        });
    }

    function showUseCaseList(panel, parent) {
        $.ajax({
            url: 'usecase/list',
            success: function (results) {
                let ucList = [];
                for (let uname in results) {
                    let uc = results[uname];
                    let ucItem = {id: uname, text: uc.name, img: 'icon-folder', nodes: [],
                        link: `usecase/get?id=${uname}`,
                        view: 'usecase'
                    };
                    let snum = 0;
                    for (let sname in uc.scenarios) {
                        snum++;
                        let scenario = uc.scenarios[sname];
                        ucItem.nodes.push({
                            id: uname + sname,
                            text: sname,
                            img: 'icon-page',
                            link: `scenario/get?id=${uname}.${sname}`,
                            view: 'scenario'
                        });
                    }
                    ucItem.count = snum;
                    ucList.push(ucItem);
                }
                w2ui[panel].add(parent, ucList);
            }
        });
    }

    function getDeploymentNodes(deployments) {
        let sitems = [];
        for (let ename in deployments.environments) {
            let env = deployments.environments[ename];
            let spkgi = {
                id: ename,
                text: ename,
                img: 'icon-folder',
                view: 'environment',
                link: `environment/get?id=${ename}`,
                nodes: []
            };
            if(env.stacks) {
                for(let sname in env.stacks) {
                    let stack = env.stacks[sname];
                    let citem = {
                        parent: ename,
                        id: stack.id,
                        text: sname,
                        img: 'icon-page',
                        link: `deployment/get?id=${stack.id}`,
                        view: 'stack'
                    };
                    spkgi.nodes.push(citem);
                }
                spkgi.count = spkgi.nodes.length;
            }
            sitems.push(spkgi);
        }
        return sitems;
    }
    function getPackageNodes(pkg) {
        let sitems = [];
        for (let pname in pkg.subpackages) {
            let spkg = pkg.subpackages[pname];
            let spkgi = {
                id: spkg.shortname,
                text: spkg.name,
                img: 'icon-folder',
                link: `package/get?id=${pname}`,
                view: 'package'
            };
            if (spkg.subpackages) {
                let spkgs = getPackageNodes(spkg);
                spkgi.nodes = spkgs;
                spkgi.count = spkgs.length;
            }
            sitems.push(spkgi);
        }
        for(let cname in pkg.classes) {
            let cls = pkg.classes[cname];
            let citem = {
                id: cls.name,
                text: cls.name,
                img: 'icon-page',
                link: `model/get?id=${cname}`,
                view: 'model'
            };
            sitems.push(citem);
        }
        return sitems;
    }

    function showPackageList(panel, parent) {
        $.ajax({
            url: 'package/list',
            success: function (results) {
                console.log(results);
                let packageList = getPackageNodes(results);
                w2ui[panel].add(parent, packageList);
            }
        });
    }
    function showDeploymentList(panel, parent) {
        $.ajax({
            url: 'deployment/list',
            success: function (results) {
                let deploymentList = getDeploymentNodes(results);
                w2ui[panel].add(parent, deploymentList);
            }
        });
    }

    function showActorList(panel, parent) {
        $.ajax({
            url: 'actor/list',
            success: function (results) {
                let actorNodes = [];
                for (let aname in results) {
                    let actor = results[aname];
                    let actorItem = {
                        id: actor.shortname,
                        text: actor.name,
                        img: 'icon-folder',
                        link: `actor/get?id=${actor.shortname}`,
                        nodes: [],
                        view: 'actor'
                    };
                    let ucnum = 0;
                    for (let ucname in actor.usecases) {
                        ucnum++;
                        let ucase = actor.usecases[ucname];
                        let ucItem = {
                            id: actor.shortname + ucname,
                            text: ucase.name,
                            img: 'icon-folder',
                            link: `usecase/get?id=${ucname}`,
                            nodes: [],
                            view: 'usecase'
                        };
                        let snum = 0;
                        for (let sname in ucase.scenarios) {
                            let scenario = ucase.scenarios[sname]
                            if (actor.scenarios && actor.scenarios.hasOwnProperty(sname)) {
                                snum++;
                                let sItem = {
                                    id: actor.shortname + ucname + sname,
                                    text: sname,
                                    img: 'icon-page',
                                    link: `scenario/get?id=${ucname}.${sname}`,
                                    method: `${scenario.method}`,
                                    view: 'scenario'
                                };
                                actor.scenarios[sname].used = true;
                                ucItem.nodes.push(sItem);
                            }
                        }
                        ucItem.count = snum;
                        actorItem.nodes.push(ucItem);

                    }
                    for (let sname in actor.scenarios) {
                        ucnum++;
                        let scenario = actor.scenarios[sname];
                        if (!scenario.used) {
                            let sItem = {
                                id: actor.shortname + sname,
                                text: sname,
                                img: 'icon-page',
                                method: `${scenario.method}`
                            };
                            actorItem.nodes.push(sItem);
                        }
                    }
                    actorItem.count = ucnum;
                    actorNodes.push(actorItem);
                }
                w2ui[panel].add(parent, actorNodes);
            }
        });
    }

    // Objects to add to the Graph {records[], cols[]}
    // mode says to start a new graph or add to the existing. "add", "new"
    function processObjectsForGraph(objs, mode) {
        let data = {nodes: {}, links: []};
        for (let i in objs.records) {
            let rec = objs.records[i];
            data.nodes[rec.id] = {
                id: rec.id,
                name: rec.name.name,
                group: rec.className,
                level: rec.package,
                view: rec.className + '3D'
            }
            // Now add the nodes of the associations
            // Go through the cols and get the associations
            for (let j in objs.columns) {
                let col = objs.columns[j];
                // this checks if it was an association
                if (rec[col.name] && col.hasOwnProperty('cardinality')) {
                    let obj = rec[col.name];
                    if (col.cardinality === 1) {
                        data.nodes[obj.id] = {
                            id: obj.id,
                            name: obj.name,
                            group: obj.type,
                            level: col.package,
                            view: obj.type + '3D'
                        };
                        if (col.owner || col.composition) {
                            data.links.push({
                                source: i,
                                target: obj.id,
                                value: 0.1
                            });
                        } else {
                            data.links.push({
                                source: obj.id,
                                target: i,
                                value: 0.1
                            });
                        }
                    } else {
                        for (let k in obj.values) {
                            let aobj = obj.values[k];
                            data.nodes[aobj.id] = {
                                id: aobj.id,
                                name: aobj.name,
                                group: aobj.type,
                                level: col.package,
                                view: aobj.type + '3D'
                            };
                            if (col.owner || col.composition) {
                                data.links.push({
                                    source: i,
                                    target: aobj.id,
                                    value: 5
                                });
                            } else {
                                data.links.push({
                                    target: i,
                                    source: aobj.id,
                                    value: 5
                                });
                            }
                        }
                    }
                }
            }
        }
        if (mode === 'add') {
            window.graph.addData(data.nodes, data.links);
        } else {
            window.graph.setData(data.nodes, data.links);
        }
    }

    function processList(result) {
        if (!w2ui['objlist']) {
            $('#objlist').w2grid({name: 'objlist'});
        }
        if (!w2ui['objdetail']) {
            $('#objdetail').w2grid({
                name: 'objdetail',
                header: 'Details',
                show: {header: true, columnHeaders: false},
                columns: [
                    {
                        field: 'name',
                        caption: 'Name',
                        size: '100px',
                        style: 'background-color: #efefef; border-bottom: 1px solid white; padding-right: 5px;',
                        attr: "align=right"
                    },
                    {
                        field: 'value', caption: 'Value', size: '100%', render: function (record) {
                            return '<div>' + record.value + '</div>';
                        }
                    }
                ]
            });
        }

        let records = [];
        let size = `${100 / Object.keys(result.columns).length + 1}%`;
        let cols = [{field: 'state', size: size, resizeable: true, caption: 'State', sortable: true}];
        for (let i in result.columns) {
            cols.push({
                field: result.columns[i].name,
                size: size,
                resizeable: true,
                caption: result.columns[i].name,
                sortable: true
            });
        }
        for (let i in result.records) {
            let rec = result.records[i];
            let color = scolor[`${rec.state.toLowerCase()}`];
            let ritem = {
                recid: i,
                state: rec.state,
                statedetail: rec.state,
                "w2ui": {"style": {0: `background-color: ${color}`}}
            };
            for (let j in result.columns) {
                let attr = rec[j];
                if (attr) {
                    if (attr.count) {
                        // set the non-detaul value to the count
                        ritem[j] = attr.count;

                        // Now set the detail value
                        let values = [];
                        for (let k in attr.values) {
                            let mvalue = attr.values[k];
                            if (mvalue.link) {
                                values.push(`<span onclick="expandObject('${mvalue.link}');">${mvalue.name}</span>`);
                            } else {
                                values.push(mvalue.name);
                            }
                        }
                        ritem[j + 'detail'] = values.join(', ');
                    } else {
                        ritem[j] = rec[j].name;
                        ritem[j + 'detail'] = rec[j].name;
                    }
                }
            }
            records.push(ritem);
        }
        w2ui['objlist'].columns = cols;
        w2ui['objlist'].records = records;
        w2ui['objlist'].onClick = function (event) {
            w2ui['objdetail'].clear();
            let record = this.get(event.recid);
            let drecords = [];
            let k = 0;
            for (let name in record) {
                if (name.includes('detail')) {
                    k++;
                    let aname = name.replace('detail', '');
                    drecords.push({recid: k, name: aname, value: record[name]});
                }
            }
            w2ui['objdetail'].add(drecords);
            window.graph.selectNodeByID(event.recid);
        }
        w2ui['objlist'].refresh();

        processObjectsForGraph(result, 'new');
    }

    function processObjectShow(result) {
        if (!w2ui['objlist']) {
            $('#objlist').w2grid({name: 'objlist'});
        }
        if (!w2ui['objdetail']) {
            $('#objdetail').w2grid({
                name: 'objdetail',
                header: 'Details',
                show: {header: true, columnHeaders: false},
                columns: [
                    {
                        field: 'name',
                        caption: 'Name',
                        size: '100px',
                        style: 'background-color: #efefef; border-bottom: 1px solid white; padding-right: 5px;',
                        attr: "align=right"
                    },
                    {
                        field: 'value', caption: 'Value', size: '100%', render: function (record) {
                            return '<div>' + record.value + '</div>';
                        }
                    }
                ]
            });
        }

        let records = [];
        let cols = [
            {field: 'name', size: "20%", resizeable: true, caption: "Name", sortable: true},
            {field: 'value', size: "80%", resizeable: true, caption: "Value", sortable: true},
        ];
        let rec = result.record;
        let i = 0;
        for (let j in result.columns) {
            i++;
            let attr = rec[j];
            let ritem;
            if (attr) {
                if (attr.count) {
                    // set the non-detaul value to the count
                    // Now set the detail value
                    let values = [];
                    for (let k in attr.values) {
                        let mvalue = attr.values[k];
                        if (mvalue.link) {
                            values.push(`<span onclick="expandObject('${mvalue.link}');">${mvalue.name}</span>`);
                        } else {
                            values.push(mvalue.name);
                        }
                    }
                    ritem = {recid: i, name: j, value: attr.count, detail: values.join(', ')};
                } else {
                    if (result.columns[j].cardinality === 1) {
                        ritem = {
                            recid: i,
                            name: j,
                            value: rec[j].name,
                            detail: `<span onclick="expandObject('${rec[j].link}');">${rec[j].name}</span>`
                        };
                    } else {
                        ritem = {recid: i, name: j, value: rec[j].name, detail: rec[j].name};
                    }
                }
                records.push(ritem);
            }
        }
        w2ui['objlist'].columns = cols;
        w2ui['objlist'].records = records;
        // Clear the detail list
        w2ui['objdetail'].clear();
        w2ui['objlist'].refresh();
        let retval = {records: {}, columns: result.columns};
        retval.records[result.record.id] = result.record;
        processObjectsForGraph(retval, 'new');
    }

    function addObjectToGraph(result) {
        let retval = {records: {}, columns: result.columns};
        retval.records[result.record.id] = result.record;
        processObjectsForGraph(retval, 'add');
        // Select the item in the Graph and centralize on it.
        window.graph.selectNodeByID(result.record.id);
    }

    function expandObjectOnGraph(link) {
        $.ajax({
            url: link,
            success: addObjectToGraph
        });
    }

    function expandObject(link) {
        $.ajax({
            url: link,
            success: processObjectShow
        });
    }

    function addObject(obj) {
        // Add the object to the list
        let ritem = {recid: obj._attributes.id};
        let columns = w2ui['objlist'].columns;
        for (let i in obj.definition.attributes) {
            if (obj._attributes.hasOwnProperty(i)) {
                ritem[i] = obj._attributes[i];
                ritem[i + 'detail'] = obj._attributes[i];
            }
        }
        for (let i in obj.definition.associations) {
            if (obj._associations.hasOwnProperty(i)) {
                let assocValue = obj._associations[i];
                let assoc = obj.definition.associations[i];
                if (assoc.cardinality === 1) {
                    ritem[i] = assocValue._attributes.name;
                    ritem[i + 'detail'] = `<span onclick="expandObject('${assocValue.type}?id=${assocValue._attributes.id}');">${assocValue._attributes.name}</spana>`;
                } else {
                    ritem[i] = assocValue.length;
                    let values = [];
                    for (let j in assocValue) {
                        let aValue = assocValue[j];
                        values.push(`<span onclick="expandObject('${aValue.type}?id=${aValue._attributes.id}');">${aValue._attributes.name}</spana>`);
                    }
                    ritem[i + 'detail'] = values.join('|');
                }
            }
        }
        w2ui['objlist'].add([ritem]);
        // Add the object to the graph
        let data = {nodes: {}, links: []};
        data.nodes[obj._attributes.id] = {
            id: obj._attributes.id,
            name: obj._attributes.name,
            group: obj.definition.name,
            level: obj.definition.package.shortname,
            view: obj.definition.name + '3D'
        }
        // Now add the nodes of the associations
        // Go through the cols and get the associations
        for (let i in obj.definition.associations) {
            if (obj._associations.hasOwnProperty(i)) {
                let aobj = obj._associations[i];
                let assoc = obj.definition.associations[i];
                if (assoc.cardinality === 1) {
                    data.nodes[aobj._attributes.id] = {
                        id: aobj._attributes.id,
                        name: aobj._attributes.name,
                        group: aobj.definition.name,
                        level: aobj.definition.package.shortname,
                        view: aobj.definition.name + '3D'
                    };
                    if (assoc.owner || assoc.composite) {
                        data.links.push({
                            source: obj._attributes.id,
                            target: aobj._attributes.id,
                            value: 0.1
                        });
                    } else {
                        data.links.push({
                            target: obj._attributes.id,
                            source: aobj._attributes.id,
                            value: 0.1
                        });
                    }
                } else {
                    let values = [];
                    for (let j in aobj) {
                        let aaobj = aobj[j];
                        data.nodes[aaobj._attributes.id] = {
                            id: aaobj._attributes.id,
                            name: aaobj._attributes.name,
                            group: aaobj.definition.name,
                            level: aaobj.definition.package.shortname,
                            view: aaobj.definition.name + '3D'
                        };
                        if (assoc.owner || assoc.composite) {
                            data.links.push({
                                source: obj._attributes.id,
                                target: aaobj._attributes.id,
                                value: 5
                            });
                        } else {
                            data.links.push({
                                target: obj._attributes.id,
                                source: aaobj._attributes.id,
                                value: 5
                            });
                        }
                    }
                }
            }
        }
        window.graph.addData(data.nodes, data.links);
    }

    function showObjectList() {
        $('#objlist').w2grid( {name: 'objlist'});
        w2ui['objlist'].onClick = function (event) {
            w2ui['objdetail'].clear();
            let record = this.get(event.recid);
            let drecords = [];
            let k = 0;
            let values = record.detail.split('|');
            for (let i in values) {
                let value = values[i];
                k++;
                drecords.push({recid: k, name: record.name, value: value});
            }
            w2ui['objdetail'].add(drecords);
            window.graph.selectNodeByID(event.recid);
        }
        $('#objdetail').w2grid({
            name: 'objdetail',
            header: 'Details',
            show: {header: true, columnHeaders: false},
            columns: [
                {
                    field: 'name',
                    caption: 'Name',
                    size: '100px',
                    style: 'background-color: #efefef; border-bottom: 1px solid white; padding-right: 5px;',
                    attr: "align=right"
                },
                {
                    field: 'value', caption: 'Value', size: '100%', render: function (record) {
                        return '<div>' + record.value + '</div>';
                    }
                }
            ]
        });
    }
    function showEventList() {
        $('#eventlist').w2grid({
            name: 'eventlist',
            show: {header: false, columnHeaders: true},
            columns: [
                {field: 'object', caption: 'Object', size: '33%', attr: "align=right", sortable: true},
                {field: 'count', caption: 'Count', size: '33%', attr: "align=right", sortable: true},
                {
                    field: 'events', caption: 'Event', size: '33%', render: function (record) {
                        let retval = "";

                        for (let i in record.events) {
                            let val = record.events[i];
                            let bcolor = scolor[i] || '#ffbb88';
                            retval += `<span title="${i}" style="padding: 3px; background-color:${bcolor};" >${val}</span>`;
                        }
                        return retval;
                    }
                }
            ]
        });
    }

    function showEvent(event) {
        if (w2ui['eventlist']) {
            let [object, ename] = event.split(/\./);
            let rec = w2ui['eventlist'].get(object);
            if (!rec) {
                rec = {recid: object, object: object, count: 0, events: {}};
                w2ui['eventlist'].add(rec);
            }
            if (ename) {
                if (!rec.events.hasOwnProperty(ename)) {
                    rec.events[ename] = 0;
                }
                rec.events[ename]++;
            }
            rec.count++;
            w2ui['eventlist'].set(object, rec);
            w2ui['eventlist'].select(object);
        }
    }


    // widget configuration
    var config = {
        layout: {
            name: 'layout',
            padding: 0,
            panels: [
                {
                    type: 'top',
                    size: 30,
                    resizable: true,
                    overflow: 'hidden',
                    style: 'border: 1px solid #0088ff; background-color:#4a96d3; color:white;',
                    toolbar: {
                        style: "background-color: #4a96d3; color: black;",
                        items: [
                            {type: 'html', html: '<h3 style="color:white;"><%= global.ailtire.config.prefix %></h3>'},
                            {type: 'spacer'},
                            {type: 'radio', id: 'expand', group: '1', text: 'Graph Only', style: 'color: black;'},
                            {type: 'radio', id: 'normal', group: '1', text: 'All', style: 'color: black;'},
                        ],
                        onClick: function (event) {
                            if (event.target === 'expand' && !event.object.checked) {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main')
                                w2ui['layout'].sizeTo('preview', "100%");
                            } else if (event.target === 'normal') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main');
                                w2ui['layout'].sizeTo('preview', "80%");
                            }
                        }
                    }
                },
                {type: 'left', size: 200, resizable: true, content: 'left', style: 'border: 1px solid #aaaaff'},
                {
                    type: 'main',
                    size: 200,
                    content: 'Details',
                    overflow: 'hidden',
                    resizable: true,
                    style: 'border: 1px solid #aaaaff',
                    toolbar: {
                        style: "background-color: #ff00ff; color: black;",
                        items: [
                            {type: 'button', id: 'editItem', text: 'Documentation', style: 'color: black;'},
                            {type: 'button', id: 'errorItem', text: 'View Model Errors', style: 'color: black;'},
                        ],
                        onClick: function (event) {
                            processTopMenu(event);
                        }
                    },
                },
                {
                    type: 'preview',
                    size: "80%",
                    content: 'Graph',
                    overflow: 'hidden',
                    resizable: true,
                    style: 'border: 1px solid #aaaaff',
                    toolbar: {
                        items: [
                            {type: 'radio', id: 'Dim-1', group: '1', text: '1D', checked: false},
                            {type: 'radio', id: 'Dim-2', group: '1', text: '2D', checked: false},
                            {type: 'radio', id: 'Dim-3', group: '1', text: '3D', checked: true},
                            {type: 'break'},
                            {
                                type: 'menu-radio', id: 'dago', caption: 'DAG: Select', img: 'icon-folder',
                                text: function (item) {
                                    let text = item.selected;
                                    let el = this.get('dago:' + item.selected);
                                    if (el) {
                                        return 'DAG: ' + el.text;
                                    } else {
                                        return 'DAG: Null';
                                    }
                                },
                                selected: 'Null',
                                items: [
                                    {text: 'Top Down', icon: 'icon-page', id: 'td'},
                                    {text: 'Bottom Up', icon: 'icon-page', id: 'bu'},
                                    {text: 'Left Right', icon: 'icon-page', id: 'lr'},
                                    {text: 'Right Left', icon: 'icon-page', id: 'rl'},
                                    {text: 'Z Out', icon: 'icon-page', id: 'zout'},
                                    {text: 'Z In', icon: 'icon-page', id: 'zin'},
                                    {text: 'Radial Out', icon: 'icon-page', id: 'radialout'},
                                    {text: 'Radial In', icon: 'icon-page', id: 'radialin'},
                                    {text: 'Null', id: 'null', icon: 'icon-page'}
                                ]
                            },
                            {type: 'break'},
                        ],
                        onClick: function (event) {
                            let [item, selected] = event.target.split(':');
                            if (item === 'dago') {
                                if (selected) {
                                    window.graph.graph.dagMode(selected);
                                }
                            } else if (event.target.includes('Dim-')) {
                                let [item, selected] = event.target.split('-');
                                window.graph.graph.numDimensions(selected);
                            } else if (event.target === 'expand') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main')
                                w2ui['layout'].sizeTo('preview', "100%");
                            } else if (event.target === 'normal') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main');
                                w2ui['layout'].sizeTo('preview', "80%");
                            }
                        }
                    }
                },
                {type: 'right', size: 200, resizable: true, content: 'right', style: 'border: 1px solid #aaaaff'},
                {type: 'bottom', size: 100, resizable: true, content: 'bottom', style: 'border: 1px solid #aaaaff'}
            ]
        },
        rightbar: {
            name: 'rightbar',
            nodes: [
                {id: 'classes', text: 'Classes', group: true, expanded: true, nodes: []}
            ],
            onClick: function (event) {
                if (event.object.link) {
                    // w2ui['layout'].content('main', `<iframe name="mainframe" style="width: 100%; height: 100%;" src="${event.object.link}"></iframe>`, 'slide-bottom');
                    // Get the information from the link and load it in the mainpage and the preview
                    currentView = event.object.link;
                    $.ajax({
                        url: event.object.link,
                        success: processList
                    });
                }
            }
        },
        sidebar: {
            name: 'sidebar',
            img: null,
            nodes: [
                {id: 'actors', text: 'Actors', group: true, expanded: true, nodes: []},
                {id: 'packages', text: 'Packages', group: true, expanded: true, nodes: []},
                {id: 'usecases', text: 'Use Cases', group: true, expanded: true, nodes: []},
                {id: 'deployments', text: 'Deployment', group: true, expanded: true, nodes: []},
            ],
            onClick: function (event) {
                if (event.object.link) {
                    // Get the information from the link and load it in the mainpage and the preview
                    selectedObject = event.object
                    $.ajax({
                        url: event.object.link,
                        success: handlers[event.object.view],
                        error: function(req, text, err) {
                            console.log(text);
                        }
                    });
                }
            }
        },
    };
    let previewWindow = null;
    $(function () {
        // initialization
        $('#main').w2layout(config.layout);
        w2ui.layout.content('left', $().w2sidebar(config.sidebar));
        w2ui.layout.content('right', $().w2sidebar(config.rightbar));
        w2ui.layout.content('main', `<div style="position: relative; height: 200px;"> <div id="objlist" style="position: absolute; left: 0px; width: 49.9%; height: 200px;">Object List Select item to see</div> <div id="objdetail" style="position: absolute; right: 0px; width: 49.9%; height: 200px;">Select Object to view details</div> </div>`);
        w2ui.layout.content('preview', `<div className="modelGraph" id="DrawingArea" style="position: absolute; left: 0px;">3D Graph view</div>`);
        w2ui.layout.content('bottom', `<div id="scenariolist" style="position: absolute; left: 0px; width: 49.9%; height: 200px;"></div>Scenario List Select Use Case and Then a Scenario<div id="eventlist" style="position: absolute; right: 0px; width: 49.9%; height: 200px;">Events in the System</div>`);
        w2ui.layout.on("resize", (event) => {
            if (!previewWindow) {
                for (let i in w2ui.layout.panels) {
                    let panel = w2ui.layout.panels[i];
                    if (panel.type === 'preview') {
                        previewWindow = panel;
                    }
                }
            }
            if (event.panel === 'preview' || event.panel === 'left') {
                previewWindow.width -= event.diff_x;
                previewWindow.height -= event.diff_y;
            } else {
                previewWindow.width += event.diff_x;
                previewWindow.height += event.diff_y;
            }

            window.graph.resize({width: previewWindow.width, height: previewWindow.height});
        });
        showObjectList();
        showEventList();
        showModelList('rightbar', 'classes');
        showActorList('sidebar', 'actors');
        showUseCaseList('sidebar', 'usecases');
        showPackageList('sidebar', 'packages');
        showDeploymentList('sidebar', 'deployments');
        let width = $('#modelGraph').width();
        let height = $('#modelGraph').height();
        let graph = new Graph3D("DrawingArea", {nodes: {}, links: []}, {
            background: "#004488",
            width: width,
            height: height,
            selectCallback: (id) => {
                if(w2ui['objlist']) {
                    w2ui['objlist'].selectNone();
                    w2ui['objlist'].select(id);
                    w2ui['objdetail'].clear();
                    let record = w2ui['objlist'].get(id);
                    let drecords = [];
                    let k = 0;
                    for (let name in record) {
                        if (name.includes('detail')) {
                            k++;
                            let aname = name.replace('detail', '');
                            drecords.push({recid: k, name: aname, value: record[name]});
                        }
                    }
                    w2ui['objdetail'].add(drecords);
                }
            },
            expandObject: (link) => {
                expandObjectOnGraph(link);
            }
        });

        let socket = io("http://<%= hostURL %>");
        socket.onAny((event, msg) => {
            showEvent(event);
            if (event.includes('.create')) {
                let [eventClass, methodClass] = event.split('.');
                let rec = w2ui['rightbar'].get(eventClass);
                w2ui['rightbar'].set(eventClass, {count: rec.count + 1});
                w2ui['rightbar'].select(eventClass);
            }
            if (currentView) {
                let [model, view] = currentView.split('/');
                model = model.toLowerCase();
                if (event.includes(model)) {
                    // Add the node to the list and to the graph.
                    if (msg.obj) {
                        addObject(msg.obj);
                    }
                }
            }
            if (event.includes('scenario.') || event.includes('step.')) {
                scenarioview.handleEvent(event, msg.obj);
            }
        });
    });


    function processTopMenu(event) {
        if(event.target === 'errorItem') {
            $.ajax({
                url: './app/errors',
                success: function(results) {
                    createErrorDialog(results);
                    w2popup.open({
                        title: 'Errors',
                        body: '<div id="errorDialog" style="width: 100%; height: 100%;"></div>',
                        style: 'padding: 15px 0px 0px 0px',
                        width: 800,
                        height: 800,
                        showMax: true,
                        onToggle: function (event) {
                            $(w2ui.errorDialog.box).hide();
                            event.onComplete = function () {
                                $(w2ui.errorDialog.box).show();
                                w2ui.errorDialog.resize();
                            }
                        },
                        onOpen: function (event) {
                            event.onComplete = function () {
                                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                                w2ui['ErrorList'].refresh();
                                $('#errorDialog').w2render("ErrorList");
                                w2ui['ErrorList'].refresh();
                            }
                        }
                    });
                }
            });
        } else if (event.target === 'editItem') {
            $.ajax({
                url: selectedObject.link + '&doc=true',
                success: function (results) {
                    let text = results.document || "Enter Details Here";
                    let getURL = selectedObject.link.replace('get','set');
                    let bodyString = '<div style="width:800px; height:800px">' +
                        '<form id="docForm" action="' + getURL + '" method="post">' +
                        `<h1>Name: ${results.name} </h1>` +
                        '<h2>Summary</h2>' +
                        '<textarea name="summary" id="summary" size="100">' + results.description +
                        '</textarea>' +
                        '<h2>Documentation</h2>' +
                        '<textarea name="documentation" id="documentation" size="200">' + text +
                        '</textarea>' +
                        '<p><input id="submitDocumentation" type="submit" onClick="w2popup.close();" value="Submit"></p>' +
                        '<p><input type="button" value="Cancel" onClick="w2popup.close()"></p>' +
                        '</form></div>';
                    w2popup.open({
                        height: 850,
                        width: 850,
                        title: 'Edit Documentation',
                        body: bodyString
                    });
                    ClassicEditor.create( document.querySelector( '#documentation' ), { } );
                    ClassicEditor.create( document.querySelector( '#summary' ), { } );
                }
            })
        }
    }
    function submitDocForm() {
        let form = $("#docForm");
        let url = form.attr("action");
        $.ajax({ type: "POST",
            url: url,
            data: form,
            dataType: "json", encode: true,
        }).done(function (data) { w2popup.close(); });
    }
    function createErrorDialog(results) {
        for(let i in results) {
            results[i].recid = i;
            let result = results[i];
            switch (results[i].type) {
                case "model.associations":
                    result.dataView = result.data.name + ':' + result.data.type;
                    result.objectView = result.object.name;
                    break;
                case "package.depend":
                    result.dataView = result.data;
                    result.objectView = result.object.name;
                    break;
                default:
                    result.dataView = result.data;
                    result.objectView = results.object;
                    break;
            }
        }
        $().w2grid({
                name: "ErrorList",
                columns: [
                    { field: 'type', size: "20%", resizable: true, caption: 'Type', sortable: true},
                    { field: 'message', size: "20%", resizable: true, caption: 'Message', sortable: true},
                    { field: 'objectView', size: "20%", resizable: true, caption: 'Object', sortable: true},
                    { field: 'dataView', size: "20%", resizable: true, caption: 'Data', sortable: true},
                    { field: 'lookup', size: "20%", resizable: true, caption: 'Lookup', sortable: true}
                ],
                show: {
                    header: true,
                    columnHeaders: true,
                   /*
                    toolbar: true,
                    toolbarSave: true,
                    toolbarAdd: true,
                    toolbarEdit: true,
                    toolbarDelete: true
                    */
                },
                records: results
                /* onSelect: (event) => {
                    let myForm = w2ui[event.target];
                    myForm.selected = event.recid;
                    let record = myForm.get(event.recid);
                    let drecords = [];
                    let k = 0;
                    for (let name in record) {
                        if (name.includes('detail')) {
                            k++;
                            let aname = name.replace('detail', '');
                            drecords.push({recid: k, name: aname, value: record[name]});
                        }
                    }
                    let detailForm = AModel.viewDetail({name: myForm.modelName, id: event.recid}, drecords)
                    // myForm.select(event.recid);
                    window.graph.selectNodeByID(event.recid);
                }
                */
        });
    }
</script>
</body>
</html>
