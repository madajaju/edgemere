<!DOCTYPE html>
<html>

<%
let hostURL = global.ailtire.config.host;
if(global.ailtire.config.listenPort) {
hostURL += ':' + global.ailtire.config.listenPort;
}
%>
<head>
    <title>Edgemere</title>
    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js"></script> -->
    <link rel="stylesheet/less" type="text/css" href="styles/importer.less"/>

    <base href="http://<%= hostURL %><%= global.ailtire.config.urlPrefix %>/">
    <script type="module" src="js/ckeditor.js"></script>
    <script src="js/jquery.js"></script>
    <script src="js/w2ui.js"></script>
    <link rel="stylesheet" href="styles/w2ui.css"/>
   <!--  <script src="https://aframe.io/releases/1.1.0/aframe.min.js"></script> -->
    <script src="js/aframe.js"></script>
    <script src="js/three.js"></script>
    <script src="js/3d-force-graph.js"></script>
    <script src="js/d3-octree.js"></script>
    <script src="js/d3-force-3d.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<script type="text/javascript">
    document.write("<base href='" + window.location + "' />");
</script>
<body style="overflow: hidden;">

<!--This is a garden of 3DObjects for the graphing-->
<div style="display:none;">
    <div id="scratchspace" style="display:none;">
        <a-scene embedded height="0px" width="0px">
            <a-entity id="ObjectGarden" position="-10 20 -100">
                <a-sphere id="default3D" position="0 0 0" radius="10" color="#cccccc"></a-sphere>
                <a-sphere id="default3DSelected" position="0 0 0" radius="10" color="#ffff00"></a-sphere>
                <a-sphere id="default3DTargeted" position="0 0 0" radius="10" color="#ff0000"></a-sphere>
                <a-sphere id="default3DSourced" position="0 0 0" radius="10" color="#00ff00"></a-sphere>
                <% for(let cname in global.classes) {
                let cls = global.classes[cname];
                if(cls.definition.view) {
                %>
                <%- cls.definition.view.object3d() %>
                <% } } %>
            </a-entity>
        </a-scene>
    </div>
</div>

<div id="main" style="position: absolute; width: 100%; height: 100%; overflow: hidden;"></div>
<script type="module">

    import {APackage, AScenario, AUsecase, AActor, AModel, AStack, AEnvironment,AObject,A3DGraph} from './js/ailtire/index.js';
    import {Graph3D} from './js/Graph3D.js';
    let selectedObject ={};

    // common colors to use based on status
    const scolor = {
        started: "#aaffff",
        create: "#aaffff",
        completed: "#aaffaa",
        failed: "#ffaaaa",
        enabled: "#aaffaa",
        disable: "#aaaaaa",
        rejected: "#ffaaaa",
        accepted: "#aaffff",
        update: "#aaffff",
        needed: "#ffbb44",
        selected: "#aaffaa",
        evaluated: "#ffffaa",
    };

    const handlers = {
        scenario: AScenario.handle,
        package: APackage.handle,
        usecase: AUsecase.handle,
        actor: AActor.handle,
        model: AModel.handle,
        stack: AStack.handle,
        environment: AEnvironment.handle,
    }
    // currentView is set to null first.
    let currentView = null;


    function showObjectList() {
        $('#objlist').w2grid({name: 'objlist'});
        w2ui['objlist'].onClick = function (event) {
            w2ui['objdetail'].clear();
            let record = this.get(event.recid);
            let drecords = [];
            let k = 0;
            let values = record.detail.split('|');
            for (let i in values) {
                let value = values[i];
                k++;
                drecords.push({recid: k, name: record.name, value: value});
            }
            w2ui['objdetail'].add(drecords);
            window.graph.selectNodeByID(event.recid);
        }
        $('#objdetail').w2grid({
            name: 'objdetail',
            header: 'Details',
            show: {header: true, columnHeaders: false},
            columns: [
                {
                    field: 'name',
                    caption: 'Name',
                    size: '100px',
                    style: 'background-color: #efefef; border-bottom: 1px solid white; padding-right: 5px;',
                    attr: "align=right"
                },
                {
                    field: 'value', caption: 'Value', size: '100%', render: function (record) {
                        return '<div>' + record.value + '</div>';
                    }
                }
            ]
        });
    }

    function showEventList() {
        $('#eventlist').w2grid({
            name: 'eventlist',
            show: {header: false, columnHeaders: true},
            columns: [
                {field: 'object', caption: 'Object', size: '33%', attr: "align=right", sortable: true},
                {field: 'count', caption: 'Count', size: '33%', attr: "align=right", sortable: true},
                {
                    field: 'events', caption: 'Event', size: '33%', render: function (record) {
                        let retval = "";

                        for (let i in record.events) {
                            let val = record.events[i];
                            let bcolor = scolor[i] || '#ffbb88';
                            retval += `<span title="${i}" style="padding: 3px; background-color:${bcolor};" >${val}</span>`;
                        }
                        return retval;
                    }
                }
            ]
        });
    }

    function showEvent(event) {
        if (w2ui['eventlist']) {
            let [object, ename] = event.split(/\./);
            let rec = w2ui['eventlist'].get(object);
            if (!rec) {
                rec = {recid: object, object: object, count: 0, events: {}};
                w2ui['eventlist'].add(rec);
            }
            if (ename) {
                if (!rec.events.hasOwnProperty(ename)) {
                    rec.events[ename] = 0;
                }
                rec.events[ename]++;
            }
            rec.count++;
            w2ui['eventlist'].set(object, rec);
            w2ui['eventlist'].select(object);
        }
    }


    // widget configuration
    var config = {
        layout: {
            name: 'layout',
            padding: 0,
            panels: [
                {
                    type: 'top',
                    size: 30,
                    resizable: true,
                    overflow: 'hidden',
                    style: 'border: 1px solid #0088ff; background-color:#4a96d3; color:white;',
                    toolbar: {
                        style: "background-color: #4a96d3; color: black;",
                        items: [
                            {type: 'html', html: '<h3 style="color:white;"><%= global.ailtire.config.prefix %></h3>'},
                            {type: 'spacer'},
                            {type: 'radio', id: 'expand', group: '1', text: 'Graph Only', style: 'color: black;'},
                            {type: 'radio', id: 'normal', group: '1', text: 'All', style: 'color: black;'},
                        ],
                        onClick: function (event) {
                            if (event.target === 'expand' && !event.object.checked) {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main')
                                w2ui['layout'].sizeTo('preview', "100%");
                            } else if (event.target === 'normal') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main');
                                w2ui['layout'].sizeTo('preview', "80%");
                            }
                        }
                    }
                },
                {type: 'left', size: 200, resizable: true, content: 'left', style: 'border: 1px solid #aaaaff'},
                {
                    type: 'main',
                    size: 200,
                    content: 'Details',
                    overflow: 'hidden',
                    resizable: true,
                    style: 'border: 1px solid #aaaaff',
                    toolbar: {
                        style: "background-color: #00aaaa; color: black;",
                        items: [
                            {type: 'button', id: 'editItem', text: 'Documentation', style: 'color: black;'},
                            {type: 'button', id: 'errorItem', text: 'View Model Errors', style: 'color: black;'},
                        ],
                        onClick: function (event) {
                            processTopMenu(event);
                        }
                    },
                },
                {
                    type: 'preview',
                    size: "80%",
                    content: 'Graph',
                    overflow: 'hidden',
                    resizable: true,
                    style: 'border: 1px solid #aaaaff',
                    toolbar: {
                        items: [
                            {
                                type: 'menu-radio', id: 'dago', caption: 'DAG: Select', img: 'icon-folder',
                                text: function (item) {
                                    let text = item.selected;
                                    let el = this.get('dago:' + item.selected);
                                    if (el) {
                                        return 'DAG: ' + el.text;
                                    } else {
                                        return 'DAG: Null';
                                    }
                                },
                                selected: 'Null',
                                items: [
                                    {text: 'Top Down', icon: 'icon-page', id: 'td'},
                                    {text: 'Bottom Up', icon: 'icon-page', id: 'bu'},
                                    {text: 'Left Right', icon: 'icon-page', id: 'lr'},
                                    {text: 'Right Left', icon: 'icon-page', id: 'rl'},
                                    {text: 'Z Out', icon: 'icon-page', id: 'zout'},
                                    {text: 'Z In', icon: 'icon-page', id: 'zin'},
                                    {text: 'Radial Out', icon: 'icon-page', id: 'radialout'},
                                    {text: 'Radial In', icon: 'icon-page', id: 'radialin'},
                                    {text: 'Null', id: 'null', icon: 'icon-page'}
                                ]
                            },
                            {type: 'break'},
                        ],
                        onClick: function (event) {
                            let [item, selected] = event.target.split(':');
                            if (item === 'dago') {
                                if (selected) {
                                    window.graph.graph.dagMode(selected);
                                }
                            } else if (event.target.includes('Dim-')) {
                                let [item, selected] = event.target.split('-');
                                window.graph.graph.numDimensions(selected);
                            } else if (event.target === 'expand') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main')
                                w2ui['layout'].sizeTo('preview', "100%");
                            } else if (event.target === 'normal') {
                                w2ui['layout'].toggle('right');
                                w2ui['layout'].toggle('left');
                                w2ui['layout'].toggle('bottom');
                                w2ui['layout'].toggle('main');
                                w2ui['layout'].sizeTo('preview', "80%");
                            }
                        }
                    }
                },
                {type: 'right', size: 200, resizable: true, content: 'right', style: 'border: 1px solid #aaaaff'},
                {type: 'bottom', size: 100, resizable: true, content: 'bottom', style: 'border: 1px solid #aaaaff'}
            ]
        },
        rightbar: {
            name: 'rightbar',
            nodes: [
                {id: 'classes', text: 'Classes', group: true, expanded: true, nodes: []}
            ],
            onClick: function (event) {
                if (event.object.link) {
                    // Get the information from the link and load it in the mainpage and the preview
                    currentView = event.object.link;
                    $.ajax({
                        url: event.object.link,
                        success: AObject.handle
                    });
                }
            }
        },
        sidebar: {
            name: 'sidebar',
            img: null,
            nodes: [
                {id: 'actors', text: 'Actors', group: true, expanded: true, nodes: []},
                {id: 'packages', text: 'Packages', group: true, expanded: true, nodes: []},
                {id: 'usecases', text: 'Use Cases', group: true, expanded: true, nodes: []},
                {id: 'deployments', text: 'Deployment', group: true, expanded: true, nodes: []},
                {id: 'pulsar', text: 'Pulsar Topics', group: true, expanded: true, nodes: []},
            ],
            onExpand: (event) => {
                if (event.object.id === 'packages') {
                    window.graph.toolbar.setToolBar();
                    $.ajax({
                        url: 'package/list',
                        success: APackage.viewSubPackage3D,
                        error: function (req, text, err) {
                            console.log(text);
                        }
                    })
                } else if (event.object.id === 'actors') {
                    window.graph.toolbar.setToolBar();
                    $.ajax({
                        url: 'actor/list',
                        success: AActor.viewList3D,
                        error: function (req, text, err) {
                            console.log(text);
                        }
                    })
                } else if (event.object.id === 'usecases') {
                    window.graph.toolbar.setToolBar();
                    $.ajax({
                        url: 'usecase/list',
                        success: AUsecase.viewList3D,
                        error: function (req, text, err) {
                            console.log(text);
                        }
                    })
                } else if (event.object.id === 'deployments') {
                    window.graph.toolbar.setToolBar();
                    $.ajax({
                        url: 'env/list',
                        success: (results) => { AEnvironment.viewList3D(results.environments); },
                        error: function(req, text,err) {
                            console.log(text);
                        }
                    })
                }
            },
            onCollapse: (event) => {
                if (event.object.id === 'packages') {
                    window.graph.toolbar.setToolBar();
                    $.ajax({
                        url: 'package/list',
                        success: APackage.viewDeep3D,
                        error: function (req, text, err) {
                            console.log(text);
                        }
                    })
                }
            },
            onClick: function (event) {
                // Show the top level Architecture
                if (event.object.link) {
                    // Get the information from the link and load it in the mainpage and the preview
                    selectedObject = event.object;
                    currentView = event.object.view;
                    $.ajax({
                        url: event.object.link,
                        success: (results) => {
                            handlers[event.object.view](results);
                        },
                        error: (req, text, err) => {
                            console.log(text);
                        }
                    });
                }
            }
        },
    };
    let previewWindow = null;
    $(function () {
        // initialization
        $('#main').w2layout(config.layout);
        w2ui.layout.content('left', $().w2sidebar(config.sidebar));
        w2ui.layout.content('right', $().w2sidebar(config.rightbar));
        w2ui.layout.content('main', `<div style="position: relative; height: 200px;"> <div id="objlist" style="position: absolute; left: 0px; width: 49.9%; height: 200px;">Object List Select item to see</div> <div id="objdetail" style="position: absolute; right: 0px; width: 49.9%; height: 200px;">Select Object to view details</div> </div>`);
        w2ui.layout.content('preview', `<div className="modelGraph" id="DrawingArea" style="position: absolute; left: 0px;">3D Graph view</div>`);
        w2ui.layout.content('bottom', `<div id="scenariolist" style="position: absolute; left: 0px; width: 49.9%; height: 200px;"></div>Scenario List Select Use Case and Then a Scenario<div id="eventlist" style="position: absolute; right: 0px; width: 49.9%; height: 200px;">Events in the System</div>`);
        w2ui.layout.on("resize", (event) => {
            if (!previewWindow) {
                for (let i in w2ui.layout.panels) {
                    let panel = w2ui.layout.panels[i];
                    if (panel.type === 'preview') {
                        previewWindow = panel;
                    }
                }
            }
            if (event.panel === 'preview' || event.panel === 'left') {
                previewWindow.width -= event.diff_x;
                previewWindow.height -= event.diff_y;
            } else {
                previewWindow.width += event.diff_x;
                previewWindow.height += event.diff_y;
            }

            window.graph.resize({width: previewWindow.width, height: previewWindow.height});
        });
        showObjectList();
        showEventList();
        let graphPanel = new A3DGraph({toolbar: w2ui['layout_preview_toolbar']});
        AModel.showList('rightbar', 'classes');
        AActor.showList('sidebar', 'actors');
        AUsecase.showList('sidebar', 'usecases');
        APackage.showList('sidebar', 'packages');
        AEnvironment.showList('sidebar', 'deployments');

        let width = $('#modelGraph').width();
        let height = $('#modelGraph').height();
        let graph = new Graph3D("DrawingArea", {nodes: {}, links: []}, {
            background: "#004488",
            width: width,
            height: height,
            selectCallback: (node) => {
                if (w2ui['objlist']) {
                    w2ui['objlist'].selectNone();
                    w2ui['objlist'].select(node.id);
                    if(node.hasOwnProperty('getDetail')) {
                        node.getDetail(node);
                    } else {
                        AObject.showDetail(node.id);
                    }
                }
            },
            expandObject: (link) => {
                AObject.expandObject(link);
            },
            expandDesign: (node) => {
                $.ajax({
                    url: node.expandLink,
                    success: (results) => {
                        console.log("Results:", results);
                        node.expandView(results, "add");
                    },
                    failed: (error) => {
                        console.error("Error:", error);
                    }
                });
            }
        });
        graph.toolbar = graphPanel;
        window.graph = graph;

        let socket = io(window.location.origin,
            {path: window.location.pathname + '/socket.io'}
        );
        socket.onAny((event, msg) => {
            showEvent(event);
            if (event.includes('.create')) {
                let [eventClass, methodClass] = event.split('.');
                let rec = w2ui['rightbar'].get(eventClass);
                w2ui['rightbar'].set(eventClass, {count: rec.count + 1});
                w2ui['rightbar'].select(eventClass);
            }
            if (currentView) {
                let [model, view] = currentView.split('/');
                model = model.toLowerCase();
                let obj = msg;
                if(msg.obj) {
                    obj = msg.obj;
                }
                if (currentView.includes('scenario')) {
                    AScenario.handleEvent(event, obj);
                } else if (event.includes(model)) {
                    // Add the node to the list and to the graph.
                    if (obj) {
                        AObject.addObject(obj);
                    }
                }
            }
        });
    });

    function processTopMenu(event) {
        if(event.target === 'errorItem') {
            $.ajax({
                url: './app/errors',
                success: function(results) {
                    createErrorDialog(results);
                    w2popup.open({
                        title: 'Errors',
                        body: '<div id="errorDialog" style="width: 100%; height: 100%;"></div>',
                        style: 'padding: 15px 0px 0px 0px',
                        width: 800,
                        height: 800,
                        showMax: true,
                        onToggle: function (event) {
                            $(w2ui.errorDialog.box).hide();
                            event.onComplete = function () {
                                $(w2ui.errorDialog.box).show();
                                w2ui.errorDialog.resize();
                            }
                        },
                        onOpen: function (event) {
                            event.onComplete = function () {
                                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                                w2ui['ErrorList'].refresh();
                                $('#errorDialog').w2render("ErrorList");
                                w2ui['ErrorList'].refresh();
                            }
                        }
                    });
                }
            });
        } else if (event.target === 'editItem') {
            $.ajax({
                url: selectedObject.link + '&doc=true',
                success: function (results) {
                    let setURL = selectedObject.link.replace('get','set');
                    AModel.editDocs(results, setURL);
                }
            });
        }
    }
    function submitDocForm() {
        let form = $("#docForm");
        let url = form.attr("action");
        $.ajax({ type: "POST",
            url: url,
            data: form,
            dataType: "json", encode: true,
        }).done(function (data) { w2popup.close(); });
    }
    function createErrorDialog(results) {
        for(let i in results) {
            results[i].recid = i;
            let result = results[i];
            switch (results[i].type) {
                case "model.associations":
                    result.dataView = result.data.name + ':' + result.data.type;
                    result.objectView = result.object.name;
                    break;
                case "package.depend":
                    result.dataView = result.data;
                    result.objectView = result.object.name;
                    break;
                default:
                    result.dataView = result.data;
                    result.objectView = results.object;
                    break;
            }
        }
        $().w2grid({
                name: "ErrorList",
                columns: [
                    { field: 'type', size: "20%", resizable: true, caption: 'Type', sortable: true},
                    { field: 'message', size: "20%", resizable: true, caption: 'Message', sortable: true},
                    { field: 'objectView', size: "20%", resizable: true, caption: 'Object', sortable: true},
                    { field: 'dataView', size: "20%", resizable: true, caption: 'Data', sortable: true},
                    { field: 'lookup', size: "20%", resizable: true, caption: 'Lookup', sortable: true}
                ],
                show: {
                    header: true,
                    columnHeaders: true,
                   /*
                    toolbar: true,
                    toolbarSave: true,
                    toolbarAdd: true,
                    toolbarEdit: true,
                    toolbarDelete: true
                    */
                },
                records: results
                /* onSelect: (event) => {
                    let myForm = w2ui[event.target];
                    myForm.selected = event.recid;
                    let record = myForm.get(event.recid);
                    let drecords = [];
                    let k = 0;
                    for (let name in record) {
                        if (name.includes('detail')) {
                            k++;
                            let aname = name.replace('detail', '');
                            drecords.push({recid: k, name: aname, value: record[name]});
                        }
                    }
                    let detailForm = AModel.viewDetail({name: myForm.modelName, id: event.recid}, drecords)
                    // myForm.select(event.recid);
                    window.graph.selectNodeByID(event.recid);
                }
                */
        });
    }
</script>
</body>
</html>
